/*
 * generated by Xtext 2.32.0
 */
grammar InternalRelisTextual;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package geodes.sms.relis.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package geodes.sms.relis.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import geodes.sms.relis.services.RelisTextualGrammarAccess;

}

@parser::members {

 	private RelisTextualGrammarAccess grammarAccess;

    public InternalRelisTextualParser(TokenStream input, RelisTextualGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "RelisRoot";
   	}

   	@Override
   	protected RelisTextualGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleRelisRoot
entryRuleRelisRoot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRelisRootRule()); }
	iv_ruleRelisRoot=ruleRelisRoot
	{ $current=$iv_ruleRelisRoot.current; }
	EOF;

// Rule RelisRoot
ruleRelisRoot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getRelisRootAccess().getRelisRootAction_0(),
					$current);
			}
		)
		otherlv_1='RelisClassificationStatistic'
		{
			newLeafNode(otherlv_1, grammarAccess.getRelisRootAccess().getRelisClassificationStatisticKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRelisRootAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRelisRootRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"geodes.sms.relis.RelisTextual.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3='{'
		{
			newLeafNode(otherlv_3, grammarAccess.getRelisRootAccess().getLeftCurlyBracketKeyword_3());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRelisRootAccess().getVariableVariableParserRuleCall_4_0_0());
					}
					lv_variable_4_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelisRootRule());
						}
						add(
							$current,
							"variable",
							lv_variable_4_0,
							"geodes.sms.relis.RelisTextual.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getRelisRootAccess().getVariableVariableParserRuleCall_4_1_0());
					}
					lv_variable_5_0=ruleVariable
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRelisRootRule());
						}
						add(
							$current,
							"variable",
							lv_variable_5_0,
							"geodes.sms.relis.RelisTextual.Variable");
						afterParserOrEnumRuleCall();
					}
				)
			)*
		)?
		otherlv_6='}'
		{
			newLeafNode(otherlv_6, grammarAccess.getRelisRootAccess().getRightCurlyBracketKeyword_5());
		}
	)
;

// Entry rule entryRuleStatistic
entryRuleStatistic returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getStatisticRule()); }
	iv_ruleStatistic=ruleStatistic
	{ $current=$iv_ruleStatistic.current; }
	EOF;

// Rule Statistic
ruleStatistic returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getStatisticAccess().getDescriptiveParserRuleCall_0());
		}
		this_Descriptive_0=ruleDescriptive
		{
			$current = $this_Descriptive_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatisticAccess().getComparativeParserRuleCall_1());
		}
		this_Comparative_1=ruleComparative
		{
			$current = $this_Comparative_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getStatisticAccess().getEvolutionParserRuleCall_2());
		}
		this_Evolution_2=ruleEvolution
		{
			$current = $this_Evolution_2.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariable
entryRuleVariable returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableRule()); }
	iv_ruleVariable=ruleVariable
	{ $current=$iv_ruleVariable.current; }
	EOF;

// Rule Variable
ruleVariable returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getVariableAccess().getVariableAction_0(),
					$current);
			}
		)
		otherlv_1='Variable'
		{
			newLeafNode(otherlv_1, grammarAccess.getVariableAccess().getVariableKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getNameEStringParserRuleCall_2_0());
				}
				lv_name_2_0=ruleEString
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"name",
						lv_name_2_0,
						"geodes.sms.relis.RelisTextual.EString");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getVariableAccess().getTypeTypeEnumRuleCall_3_0());
				}
				lv_type_3_0=ruleType
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVariableRule());
					}
					set(
						$current,
						"type",
						lv_type_3_0,
						"geodes.sms.relis.RelisTextual.Type");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_4='{'
		{
			newLeafNode(otherlv_4, grammarAccess.getVariableAccess().getLeftCurlyBracketKeyword_4());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getVariableAccess().getStatisticStatisticParserRuleCall_5_0_0());
					}
					lv_statistic_5_0=ruleStatistic
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getVariableRule());
						}
						add(
							$current,
							"statistic",
							lv_statistic_5_0,
							"geodes.sms.relis.RelisTextual.Statistic");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_6=';'
				{
					newLeafNode(otherlv_6, grammarAccess.getVariableAccess().getSemicolonKeyword_5_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getVariableAccess().getStatisticStatisticParserRuleCall_5_1_1_0());
						}
						lv_statistic_7_0=ruleStatistic
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getVariableRule());
							}
							add(
								$current,
								"statistic",
								lv_statistic_7_0,
								"geodes.sms.relis.RelisTextual.Statistic");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
		otherlv_8='}'
		{
			newLeafNode(otherlv_8, grammarAccess.getVariableAccess().getRightCurlyBracketKeyword_6());
		}
	)
;

// Entry rule entryRuleEString
entryRuleEString returns [String current=null]:
	{ newCompositeNode(grammarAccess.getEStringRule()); }
	iv_ruleEString=ruleEString
	{ $current=$iv_ruleEString.current.getText(); }
	EOF;

// Rule EString
ruleEString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_STRING_0=RULE_STRING
		{
			$current.merge(this_STRING_0);
		}
		{
			newLeafNode(this_STRING_0, grammarAccess.getEStringAccess().getSTRINGTerminalRuleCall_0());
		}
		    |
		this_ID_1=RULE_ID
		{
			$current.merge(this_ID_1);
		}
		{
			newLeafNode(this_ID_1, grammarAccess.getEStringAccess().getIDTerminalRuleCall_1());
		}
	)
;

// Entry rule entryRuleDescriptive
entryRuleDescriptive returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDescriptiveRule()); }
	iv_ruleDescriptive=ruleDescriptive
	{ $current=$iv_ruleDescriptive.current; }
	EOF;

// Rule Descriptive
ruleDescriptive returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getDescriptiveAccess().getDescriptiveAction_0(),
					$current);
			}
		)
		otherlv_1='Descriptive'
		{
			newLeafNode(otherlv_1, grammarAccess.getDescriptiveAccess().getDescriptiveKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getDescriptiveAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getDescriptiveAccess().getStatsDescStatsEnumRuleCall_3_0_0());
					}
					lv_stats_3_0=ruleDescStats
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getDescriptiveRule());
						}
						add(
							$current,
							"stats",
							lv_stats_3_0,
							"geodes.sms.relis.RelisTextual.DescStats");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getDescriptiveAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getDescriptiveAccess().getStatsDescStatsEnumRuleCall_3_1_1_0());
						}
						lv_stats_5_0=ruleDescStats
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getDescriptiveRule());
							}
							add(
								$current,
								"stats",
								lv_stats_5_0,
								"geodes.sms.relis.RelisTextual.DescStats");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleComparative
entryRuleComparative returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getComparativeRule()); }
	iv_ruleComparative=ruleComparative
	{ $current=$iv_ruleComparative.current; }
	EOF;

// Rule Comparative
ruleComparative returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getComparativeAccess().getComparativeAction_0(),
					$current);
			}
		)
		otherlv_1='Comparative'
		{
			newLeafNode(otherlv_1, grammarAccess.getComparativeAccess().getComparativeKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getComparativeAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getComparativeAccess().getStatsCompStatsEnumRuleCall_3_0_0());
					}
					lv_stats_3_0=ruleCompStats
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getComparativeRule());
						}
						add(
							$current,
							"stats",
							lv_stats_3_0,
							"geodes.sms.relis.RelisTextual.CompStats");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getComparativeAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getComparativeAccess().getStatsCompStatsEnumRuleCall_3_1_1_0());
						}
						lv_stats_5_0=ruleCompStats
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getComparativeRule());
							}
							add(
								$current,
								"stats",
								lv_stats_5_0,
								"geodes.sms.relis.RelisTextual.CompStats");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Entry rule entryRuleEvolution
entryRuleEvolution returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getEvolutionRule()); }
	iv_ruleEvolution=ruleEvolution
	{ $current=$iv_ruleEvolution.current; }
	EOF;

// Rule Evolution
ruleEvolution returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				$current = forceCreateModelElement(
					grammarAccess.getEvolutionAccess().getEvolutionAction_0(),
					$current);
			}
		)
		otherlv_1='Evolution'
		{
			newLeafNode(otherlv_1, grammarAccess.getEvolutionAccess().getEvolutionKeyword_1());
		}
		otherlv_2=':'
		{
			newLeafNode(otherlv_2, grammarAccess.getEvolutionAccess().getColonKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getEvolutionAccess().getStatsEvoStatsEnumRuleCall_3_0_0());
					}
					lv_stats_3_0=ruleEvoStats
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getEvolutionRule());
						}
						add(
							$current,
							"stats",
							lv_stats_3_0,
							"geodes.sms.relis.RelisTextual.EvoStats");
						afterParserOrEnumRuleCall();
					}
				)
			)
			(
				otherlv_4=','
				{
					newLeafNode(otherlv_4, grammarAccess.getEvolutionAccess().getCommaKeyword_3_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getEvolutionAccess().getStatsEvoStatsEnumRuleCall_3_1_1_0());
						}
						lv_stats_5_0=ruleEvoStats
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getEvolutionRule());
							}
							add(
								$current,
								"stats",
								lv_stats_5_0,
								"geodes.sms.relis.RelisTextual.EvoStats");
							afterParserOrEnumRuleCall();
						}
					)
				)
			)*
		)?
	)
;

// Rule Type
ruleType returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Continuous'
			{
				$current = grammarAccess.getTypeAccess().getContinuousEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTypeAccess().getContinuousEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Nominal'
			{
				$current = grammarAccess.getTypeAccess().getNominalEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTypeAccess().getNominalEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Comparative'
			{
				$current = grammarAccess.getTypeAccess().getComparativeEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getTypeAccess().getComparativeEnumLiteralDeclaration_2());
			}
		)
	)
;

// Rule DescStats
ruleDescStats returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Frequency_tables'
			{
				$current = grammarAccess.getDescStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getDescStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Bar_plots'
			{
				$current = grammarAccess.getDescStatsAccess().getBar_plotsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getDescStatsAccess().getBar_plotsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Statistics'
			{
				$current = grammarAccess.getDescStatsAccess().getStatisticsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getDescStatsAccess().getStatisticsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Box_plots'
			{
				$current = grammarAccess.getDescStatsAccess().getBox_plotsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getDescStatsAccess().getBox_plotsEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Violin_plots'
			{
				$current = grammarAccess.getDescStatsAccess().getViolin_plotsEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getDescStatsAccess().getViolin_plotsEnumLiteralDeclaration_4());
			}
		)
	)
;

// Rule CompStats
ruleCompStats returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Frequency_tables'
			{
				$current = grammarAccess.getCompStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getCompStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Stacked_bar_plots'
			{
				$current = grammarAccess.getCompStatsAccess().getStacked_bar_plotsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getCompStatsAccess().getStacked_bar_plotsEnumLiteralDeclaration_1());
			}
		)
		    |
		(
			enumLiteral_2='Grouped_bar_plots'
			{
				$current = grammarAccess.getCompStatsAccess().getGrouped_bar_plotsEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_2, grammarAccess.getCompStatsAccess().getGrouped_bar_plotsEnumLiteralDeclaration_2());
			}
		)
		    |
		(
			enumLiteral_3='Bubble_charts'
			{
				$current = grammarAccess.getCompStatsAccess().getBubble_chartsEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_3, grammarAccess.getCompStatsAccess().getBubble_chartsEnumLiteralDeclaration_3());
			}
		)
		    |
		(
			enumLiteral_4='Fisher_exact_test'
			{
				$current = grammarAccess.getCompStatsAccess().getFisher_exact_testEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_4, grammarAccess.getCompStatsAccess().getFisher_exact_testEnumLiteralDeclaration_4());
			}
		)
		    |
		(
			enumLiteral_5='Shapiro_Wilk_correlation_test'
			{
				$current = grammarAccess.getCompStatsAccess().getShapiro_Wilk_correlation_testEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_5, grammarAccess.getCompStatsAccess().getShapiro_Wilk_correlation_testEnumLiteralDeclaration_5());
			}
		)
		    |
		(
			enumLiteral_6='Pearson_correlation_test'
			{
				$current = grammarAccess.getCompStatsAccess().getPearson_correlation_testEnumLiteralDeclaration_6().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_6, grammarAccess.getCompStatsAccess().getPearson_correlation_testEnumLiteralDeclaration_6());
			}
		)
		    |
		(
			enumLiteral_7='Spearman_correlation_test'
			{
				$current = grammarAccess.getCompStatsAccess().getSpearman_correlation_testEnumLiteralDeclaration_7().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_7, grammarAccess.getCompStatsAccess().getSpearman_correlation_testEnumLiteralDeclaration_7());
			}
		)
	)
;

// Rule EvoStats
ruleEvoStats returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='Frequency_tables'
			{
				$current = grammarAccess.getEvoStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getEvoStatsAccess().getFrequency_tablesEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='Evolution_plots'
			{
				$current = grammarAccess.getEvoStatsAccess().getEvolution_plotsEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getEvoStatsAccess().getEvolution_plotsEnumLiteralDeclaration_1());
			}
		)
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
